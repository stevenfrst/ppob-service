// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	vouchers "ppob-service/usecase/voucher"

	mock "github.com/stretchr/testify/mock"
)

// IVoucherRepository is an autogenerated mock type for the IVoucherRepository type
type IVoucherRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: voc
func (_m *IVoucherRepository) Create(voc vouchers.Domain) error {
	ret := _m.Called(voc)

	var r0 error
	if rf, ok := ret.Get(0).(func(vouchers.Domain) error); ok {
		r0 = rf(voc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: id
func (_m *IVoucherRepository) DeleteByID(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadALL provides a mock function with given fields:
func (_m *IVoucherRepository) ReadALL() ([]vouchers.Domain, error) {
	ret := _m.Called()

	var r0 []vouchers.Domain
	if rf, ok := ret.Get(0).(func() []vouchers.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vouchers.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadById provides a mock function with given fields: id
func (_m *IVoucherRepository) ReadById(id int) (vouchers.Domain, error) {
	ret := _m.Called(id)

	var r0 vouchers.Domain
	if rf, ok := ret.Get(0).(func(int) vouchers.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(vouchers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: code
func (_m *IVoucherRepository) Verify(code string) (int, error) {
	ret := _m.Called(code)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
