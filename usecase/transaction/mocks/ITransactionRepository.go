// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	transaction "ppob-service/usecase/transaction"

	mock "github.com/stretchr/testify/mock"
)

// ITransactionRepository is an autogenerated mock type for the ITransactionRepository type
type ITransactionRepository struct {
	mock.Mock
}

// CreateDetail provides a mock function with given fields: det
func (_m *ITransactionRepository) CreateDetail(det transaction.DetailDomain) (uint, error) {
	ret := _m.Called(det)

	var r0 uint
	if rf, ok := ret.Get(0).(func(transaction.DetailDomain) uint); ok {
		r0 = rf(det)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transaction.DetailDomain) error); ok {
		r1 = rf(det)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTx provides a mock function with given fields: tx
func (_m *ITransactionRepository) CreateTx(tx transaction.Domain) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(transaction.Domain) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNameNTax provides a mock function with given fields: id
func (_m *ITransactionRepository) GetNameNTax(id int) (string, int) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetTxByID provides a mock function with given fields: id
func (_m *ITransactionRepository) GetTxByID(id int) (transaction.Domain, error) {
	ret := _m.Called(id)

	var r0 transaction.Domain
	if rf, ok := ret.Get(0).(func(int) transaction.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(transaction.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxHistoryByID provides a mock function with given fields: id
func (_m *ITransactionRepository) GetTxHistoryByID(id int) (transaction.HistoryDomain, error) {
	ret := _m.Called(id)

	var r0 transaction.HistoryDomain
	if rf, ok := ret.Get(0).(func(int) transaction.HistoryDomain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(transaction.HistoryDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserEmail provides a mock function with given fields: id
func (_m *ITransactionRepository) GetUserEmail(id int) (string, string) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// GetUserTxByID provides a mock function with given fields: _a0
func (_m *ITransactionRepository) GetUserTxByID(_a0 int) ([]transaction.HistoryDomain, error) {
	ret := _m.Called(_a0)

	var r0 []transaction.HistoryDomain
	if rf, ok := ret.Get(0).(func(int) []transaction.HistoryDomain); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.HistoryDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStocks provides a mock function with given fields: id
func (_m *ITransactionRepository) UpdateStocks(id int) {
	_m.Called(id)
}

// UpdateTx provides a mock function with given fields: tx
func (_m *ITransactionRepository) UpdateTx(tx transaction.Domain) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(transaction.Domain) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
