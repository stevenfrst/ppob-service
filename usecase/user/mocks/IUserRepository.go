// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	user "ppob-service/usecase/user"

	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: id, oldPassword, newPassword
func (_m *IUserRepository) ChangePassword(id int, oldPassword string, newPassword string) (string, error) {
	ret := _m.Called(id, oldPassword, newPassword)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, string, string) string); ok {
		r0 = rf(id, oldPassword, newPassword)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string) error); ok {
		r1 = rf(id, oldPassword, newPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeStatus provides a mock function with given fields: id
func (_m *IUserRepository) ChangeStatus(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckLogin provides a mock function with given fields: email, password
func (_m *IUserRepository) CheckLogin(email string, password string) (user.Domain, error) {
	ret := _m.Called(email, password)

	var r0 user.Domain
	if rf, ok := ret.Get(0).(func(string, string) user.Domain); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(user.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetailUser provides a mock function with given fields: id
func (_m *IUserRepository) DetailUser(id int) (user.Domain, error) {
	ret := _m.Called(id)

	var r0 user.Domain
	if rf, ok := ret.Get(0).(func(int) user.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(user.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmail provides a mock function with given fields: id
func (_m *IUserRepository) GetEmail(id uint) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadPin provides a mock function with given fields: id
func (_m *IUserRepository) ReadPin(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: users
func (_m *IUserRepository) Register(users *user.Domain) (string, error) {
	ret := _m.Called(users)

	var r0 string
	if rf, ok := ret.Get(0).(func(*user.Domain) string); ok {
		r0 = rf(users)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*user.Domain) error); ok {
		r1 = rf(users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: email, password
func (_m *IUserRepository) ResetPassword(email string, password string) error {
	ret := _m.Called(email, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePinToRedis provides a mock function with given fields: id
func (_m *IUserRepository) SavePinToRedis(id int) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
