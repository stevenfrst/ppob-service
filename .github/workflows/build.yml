name: Unit Test, Build Docker Image, Deploy to Swarm
on:
#  pull_request:
#    branches:
#      - 'main'
#      - 'development'
  push:
    branches:
      - 'swagger'


jobs:
#  job 1: unit test
  unit-test:
    name: 'Do unit test to the project'
    runs-on: ubuntu-latest
    steps:
      - name: Setup github action (CI)
        uses: actions/checkout@v2
      - name: Setup golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: create test file
        env:
          CONFIG_FILE: ${{ secrets.CONFIGJSON }}
        run: |
          touch ./config.json
          echo "$CONFIG_FILE" >> ./config.json
          cat ./config.json
          ls -a .
        shell: bash
      - name: Running unit test
        run: go test ./... -cover
#
  #  job 2: build docker image, push registry
  build-push-docker:
    name: 'Build image and push to registry'
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v2
      - name: create test file
        env:
          CONFIG_FILE: ${{ secrets.CONFIGJSON }}
        run: |
          touch ./config.json
          echo "$CONFIG_FILE" >> ./config.json
          cat ./config.json
          ls -a .
        shell: bash
      - name: build docker
        run: docker build -t stevenfrst/ppob-service .
      - name: login dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: push the previously built image to registry
        run: docker push stevenfrst/ppob-service
#  # Sonar Analyst
#  sonarQubeTrigger:
#    name: SonarQube Trigger
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - name: SonarQube Scan
#        uses: kitabisa/sonarqube-action@v1.1.0
#        with:
#          host: ${{ secrets.SONARQUBE_HOST }}
#          login: ${{ secrets.SONARQUBE_TOKEN }}
#
  # deploy ke swarm
  deploy-to-swarm:
    runs-on: ubuntu-latest
    needs: build-push-docker
    steps:
      - name: Deploy using ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            touch hello
